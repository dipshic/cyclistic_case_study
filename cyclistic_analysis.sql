---------------------------------------------
-- Data Preparation
---------------------------------------------

-- Drop tables
DROP TABLE CYCLIST_TRIP_DATA;
DROP TABLE MEM_CAS_RIDES;
DROP TABLE YEAR_RIDES;
DROP TABLE YEAR_RIDES_CASUAL;
DROP TABLE YEAR_RIDES_MEMBERS;
DROP TABLE ROUND_RIDES;
DROP TABLE MEM_CAS_BIKES_RIDES;
DROP TABLE BIKES_RIDES;

-- Checking if all the tables have the same number of columns       
SELECT COUNT(*)
FROM USER_TAB_COLUMNS
WHERE table_name = 'TRIP_202004';

SELECT COUNT('elephant')
FROM USER_TAB_COLUMNS
WHERE table_name = 'TRIP_202007';

SELECT COUNT(*)
FROM USER_TAB_COLUMNS
WHERE table_name = 'TRIP_202010';

SELECT COUNT(*)
FROM USER_TAB_COLUMNS
WHERE table_name = 'TRIP_202103';

-- Union of all the 12 tables into a single data table
CREATE TABLE CYCLIST_TRIP_DATA AS 
(
    SELECT *
    FROM TRIP_202004
    
    UNION

    SELECT *
    FROM TRIP_202005

    UNION

    SELECT *
    FROM TRIP_202006

    UNION

    SELECT *
    FROM TRIP_202007
    
    UNION

    SELECT *
    FROM TRIP_202008

    UNION

    SELECT *
    FROM TRIP_202009

    UNION

    SELECT *
    FROM TRIP_202010
    
    UNION

    SELECT *
    FROM TRIP_202011

    UNION

    SELECT *
    FROM TRIP_202012

    UNION

    SELECT *
    FROM TRIP_202101
    
    UNION

    SELECT *
    FROM TRIP_202102

    UNION

    SELECT *
    FROM TRIP_202103
);

---------------------------------------------
-- Data Exploration
---------------------------------------------

-- Checking if table exists
SELECT table_name
FROM USER_TABLES WHERE table_name = 'CYCLIST_TRIP_DATA';

-- View table
SELECT *
FROM CYCLIST_TRIP_DATA;

-- Find the number of rides by casual-members and rides by annual-members
SELECT MEMBER_CASUAL, COUNT(*)
FROM CYCLIST_TRIP_DATA
GROUP BY MEMBER_CASUAL;

-- Counting number of rideable types
SELECT rideable_type, COUNT(1)
FROM CYCLIST_TRIP_DATA
GROUP BY rideable_type;

-- Counting rides ending at each docking station
SELECT END_STATION_ID, END_STATION_NAME, COUNT(1) AS rides
FROM CYCLIST_TRIP_DATA
GROUP BY END_STATION_ID, END_STATION_NAME
ORDER BY rides DESC;

-- Counting rides starting at each docking station
SELECT START_STATION_NAME, COUNT(1) AS rides
FROM CYCLIST_TRIP_DATA
GROUP BY START_STATION_NAME
ORDER BY rides DESC;

-- Count number of round trips
SELECT START_STATION_ID, END_STATION_ID,RIDEABLE_TYPE,MEMBER_CASUAL
FROM CYCLIST_TRIP_DATA
WHERE START_STATION_ID = END_STATION_ID;

SELECT COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE START_STATION_ID = END_STATION_ID;

-- Counting total number of trips
SELECT COUNT(*)
FROM CYCLIST_TRIP_DATA;

---------------------------------------------
-- Data Quality Check
---------------------------------------------

-- See if anything other than member or casual is present in MEMBER_CASUAL
SELECT DISTINCT MEMBER_CASUAL
FROM CYCLIST_TRIP_DATA;

-- Check the ranges of latitudes and longitudes
SELECT MIN(end_lng),MAX(end_lng),
       MIN(end_lat),MAX(end_lat), 
       MIN(start_lng),MAX(start_lng),
       MIN(start_lat),MAX(start_lat)
FROM CYCLIST_TRIP_DATA;

-- Check if ride ids (which are supposed to be unique) having count >1
SELECT ride_id, COUNT(1)
FROM CYCLIST_TRIP_DATA
GROUP BY ride_id
HAVING COUNT(1) > 1;

-- Checking for nulls in rows
SELECT *
FROM CYCLIST_TRIP_DATA
WHERE started_at IS NULL OR ended_at IS NULL;

-- Checking for rows where column value is absent
-- We want to investigate if the blank fields are either due to empty strings, or null , or whitespaces

-- Below query is to counter fileds which only have whitespaces 
SELECT COUNT (*) 
FROM CYCLIST_TRIP_DATA 
WHERE TRIM(START_STATION_ID) IS NULL OR TRIM(START_STATION_NAME) IS NULL;

-- Counting number of nulls
-- Note: Visual studio code shows null entries as blank fields. 
-- Checking on start and end stations
SELECT COUNT (*) 
FROM CYCLIST_TRIP_DATA 
WHERE START_STATION_ID IS NULL OR START_STATION_NAME IS NULL;

SELECT COUNT (*) 
FROM CYCLIST_TRIP_DATA 
WHERE END_STATION_ID IS NULL OR END_STATION_NAME IS NULL;

SELECT COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE START_LAT IS NULL OR END_LAT IS NULL;

SELECT COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE START_LNG IS NULL OR END_LNG IS NULL;

SELECT COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE MEMBER_CASUAL IS NULL;

SELECT COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE RIDEABLE_TYPE IS NULL;

---------------------------------------------
-- Data Cleaning
---------------------------------------------

-- Delete all rows where any field is null
-- Below query deletes 1,95,057 rows
DELETE
FROM CYCLIST_TRIP_DATA
WHERE RIDE_ID IS NULL
OR RIDEABLE_TYPE IS NULL
OR STARTED_AT IS NULL
OR ENDED_AT IS NULL
OR START_STATION_NAME IS NULL
OR START_STATION_ID IS NULL
OR END_STATION_NAME IS NULL
OR END_STATION_ID IS NULL
OR START_LAT IS NULL
OR START_LNG IS NULL
OR END_LAT IS NULL
OR END_LNG IS NULL
OR MEMBER_CASUAL IS NULL;

-- Identify and exclude data with anomalies
-- 10743 rows deleted.

DELETE
FROM CYCLIST_TRIP_DATA
WHERE STARTED_AT >= ENDED_AT;

-- Checking if ride ids still have count >1
SELECT ride_id, COUNT(1)
FROM CYCLIST_TRIP_DATA
GROUP BY ride_id
HAVING COUNT(1) > 1;

-- Check again for any nulls
SELECT COUNT (*) 
FROM CYCLIST_TRIP_DATA 
WHERE START_STATION_ID IS NULL OR START_STATION_NAME IS NULL;

---------------------------------------------
-- Tables for Visualization
---------------------------------------------

-- Create new column trip duration secs
ALTER TABLE CYCLIST_TRIP_DATA
ADD TRIP_DURATION_SECS NUMBER;

-- Calculate trip length
UPDATE CYCLIST_TRIP_DATA
SET TRIP_DURATION_SECS = EXTRACT(HOUR FROM (ended_at-started_at))*3600 + EXTRACT(MINUTE FROM (ended_at-started_at))*60 + EXTRACT(SECOND FROM (ended_at-started_at));

-- Number of rides for casual and members
CREATE TABLE MEM_CAS_RIDES AS
    SELECT MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM CYCLIST_TRIP_DATA
    GROUP BY MEMBER_CASUAL
    ORDER BY COUNT(*) DESC;

-- Member	1936040
-- Casual	1347908

-- Count of rides for each bike type
CREATE TABLE BIKES_RIDES AS
    SELECT RIDEABLE_TYPE, COUNT(*) AS NO_OF_RIDES
    FROM CYCLIST_TRIP_DATA
    GROUP BY RIDEABLE_TYPE
    ORDER BY COUNT(*) DESC;

-- Distribution of members and casuals for each bike type
CREATE TABLE MEM_CAS_BIKES_RIDES AS
    SELECT RIDEABLE_TYPE, MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM CYCLIST_TRIP_DATA
    GROUP BY RIDEABLE_TYPE,MEMBER_CASUAL
    ORDER BY RIDEABLE_TYPE ASC, COUNT(*) DESC;

-- Count round trips for each bike type and membership type
CREATE TABLE ROUND_RIDES AS
    SELECT START_STATION_NAME, COUNT(*) AS NO_OF_ROUND_TRIPS, RIDEABLE_TYPE, MEMBER_CASUAL
    FROM CYCLIST_TRIP_DATA
    WHERE START_STATION_ID = END_STATION_ID
    GROUP BY START_STATION_NAME, RIDEABLE_TYPE, MEMBER_CASUAL
    ORDER BY START_STATION_NAME, COUNT(*) DESC, RIDEABLE_TYPE;

-- Distribution of casual and member rides across the year
CREATE TABLE YEAR_RIDES AS
    SELECT TO_CHAR(STARTED_AT,'MON-YYYY') AS MON_YEAR, MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM CYCLIST_TRIP_DATA
    GROUP BY TO_CHAR(STARTED_AT,'MON-YYYY'),MEMBER_CASUAL;

CREATE TABLE YEAR_RIDES_CASUAL AS
    SELECT TO_CHAR(STARTED_AT,'MON-YYYY') AS MON_YEAR, MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM CYCLIST_TRIP_DATA
    WHERE MEMBER_CASUAL = 'casual'
    GROUP BY TO_CHAR(STARTED_AT,'MON-YYYY'),MEMBER_CASUAL;

CREATE TABLE YEAR_RIDES_MEMBERS AS
    SELECT TO_CHAR(STARTED_AT,'MON-YYYY') AS MON_YEAR, MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM CYCLIST_TRIP_DATA
    WHERE MEMBER_CASUAL = 'member'
    GROUP BY TO_CHAR(STARTED_AT,'MON-YYYY'),MEMBER_CASUAL;

DROP TABLE Q1_RIDES;
DROP TABLE Q3_RIDES;

/************************************************************************
-- A closer look at our best months (Q3-2020) BY UNION OF 6,7,8 MONTH TABLES 
/************************************************************************/
CREATE TABLE Q3_RIDES AS
(
SELECT * FROM TRIP_202007
UNION
SELECT * FROM TRIP_202008
UNION
SELECT * FROM TRIP_202009
);

CREATE TABLE Q1_RIDES AS
(
SELECT * FROM TRIP_202101
UNION
SELECT * FROM TRIP_202102
UNION
SELECT * FROM TRIP_202103
);

-- Clean data

-- Delete all rows where any field is null
-- Below query deletes 47,474 rows
DELETE
FROM Q3_RIDES
WHERE RIDE_ID IS NULL
OR RIDEABLE_TYPE IS NULL
OR STARTED_AT IS NULL
OR ENDED_AT IS NULL
OR START_STATION_NAME IS NULL
OR START_STATION_ID IS NULL
OR END_STATION_NAME IS NULL
OR END_STATION_ID IS NULL
OR START_LAT IS NULL
OR START_LNG IS NULL
OR END_LAT IS NULL
OR END_LNG IS NULL
OR MEMBER_CASUAL IS NULL;

-- Below query deletes 42,756 rows
DELETE
FROM Q1_RIDES
WHERE RIDE_ID IS NULL
OR RIDEABLE_TYPE IS NULL
OR STARTED_AT IS NULL
OR ENDED_AT IS NULL
OR START_STATION_NAME IS NULL
OR START_STATION_ID IS NULL
OR END_STATION_NAME IS NULL
OR END_STATION_ID IS NULL
OR START_LAT IS NULL
OR START_LNG IS NULL
OR END_LAT IS NULL
OR END_LNG IS NULL
OR MEMBER_CASUAL IS NULL;

-- Identify and exclude data with anomalies
-- 6828 rows deleted.

DELETE
FROM Q3_RIDES
WHERE STARTED_AT >= ENDED_AT;

-- 7 rows deleted.
DELETE
FROM Q1_RIDES
WHERE STARTED_AT >= ENDED_AT;

DROP TABLE Q3_DAILY_RIDES;
DROP TABLE Q1_DAILY_RIDES;
CREATE TABLE Q3_DAILY_RIDES AS
    SELECT TO_CHAR(STARTED_AT,'DD-MON-YYYY') AS DATE_MON_YEAR, MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM Q3_RIDES
    GROUP BY TO_CHAR(STARTED_AT,'DD-MON-YYYY'),MEMBER_CASUAL;

CREATE TABLE Q1_DAILY_RIDES AS
    SELECT TO_CHAR(STARTED_AT,'DD-MON-YYYY') AS DATE_MON_YEAR, MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM Q1_RIDES
    GROUP BY TO_CHAR(STARTED_AT,'DD-MON-YYYY'),MEMBER_CASUAL;


DROP TABLE WEEK_RIDES;
CREATE TABLE WEEK_RIDES AS
    SELECT TO_CHAR(STARTED_AT,'DAY') AS WEEKDAY, MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM CYCLIST_TRIP_DATA
    GROUP BY TO_CHAR(STARTED_AT,'DAY'),MEMBER_CASUAL
    ORDER BY TO_CHAR(STARTED_AT,'DAY');

DROP TABLE HOUR_RIDES;
CREATE TABLE HOUR_RIDES AS
    SELECT TO_CHAR(STARTED_AT, 'HH24') AS HOUR, MEMBER_CASUAL, COUNT(*) AS NO_OF_RIDES
    FROM CYCLIST_TRIP_DATA
    GROUP BY TO_CHAR(STARTED_AT,'HH24'),MEMBER_CASUAL
    ORDER BY TO_CHAR(STARTED_AT,'HH24');

-- Trip durations

DROP TABLE TRIP_LENGTHS;
CREATE TABLE TRIP_LENGTHS
(
    TRIP_DURATION VARCHAR(256),
    MEMBER_TYPE VARCHAR(26),
    BIKE_TYPE VARCHAR(26),
    NUMBER_OF_RIDES INT
);

INSERT INTO TRIP_LENGTHS
(
SELECT '< 0.25 hr' AS TRIP_DURATION, MEMBER_CASUAL, RIDEABLE_TYPE, COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE TRIP_DURATION_SECS <= 900
GROUP BY MEMBER_CASUAL, RIDEABLE_TYPE

UNION ALL

SELECT '0.25-1 hr' AS TRIP_DURATION, MEMBER_CASUAL, RIDEABLE_TYPE, COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE TRIP_DURATION_SECS > 900 AND TRIP_DURATION_SECS <= 3600
GROUP BY MEMBER_CASUAL, RIDEABLE_TYPE

UNION ALL

SELECT '1-3 hrs' AS TRIP_DURATION, MEMBER_CASUAL, RIDEABLE_TYPE, COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE TRIP_DURATION_SECS > 3600 AND TRIP_DURATION_SECS <= 10800
GROUP BY MEMBER_CASUAL, RIDEABLE_TYPE

UNION ALL

SELECT '3-6 hrs' AS TRIP_DURATION, MEMBER_CASUAL, RIDEABLE_TYPE, COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE TRIP_DURATION_SECS > 10800 AND TRIP_DURATION_SECS <= 21600
GROUP BY MEMBER_CASUAL, RIDEABLE_TYPE

UNION ALL

SELECT '6-12 hrs' AS TRIP_DURATION, MEMBER_CASUAL, RIDEABLE_TYPE, COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE TRIP_DURATION_SECS > 21600 AND TRIP_DURATION_SECS <= 43200
GROUP BY MEMBER_CASUAL, RIDEABLE_TYPE

UNION ALL

SELECT '12-24 hrs' AS TRIP_DURATION, MEMBER_CASUAL, RIDEABLE_TYPE, COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE TRIP_DURATION_SECS > 43200 AND TRIP_DURATION_SECS <= 86400
GROUP BY MEMBER_CASUAL, RIDEABLE_TYPE

UNION ALL

SELECT '> 24 hrs' AS TRIP_DURATION, MEMBER_CASUAL, RIDEABLE_TYPE, COUNT(*)
FROM CYCLIST_TRIP_DATA
WHERE TRIP_DURATION_SECS > 86400
GROUP BY MEMBER_CASUAL, RIDEABLE_TYPE
);

-- Favourite trips/routes

DROP TABLE RIDE_ROUTES;
CREATE TABLE RIDE_ROUTES AS
SELECT *
FROM 
(
SELECT (TRIM(START_STATION_NAME)|| ' - ' || TRIM(END_STATION_NAME)) AS ROUTE,
       COUNT(*) AS NO_OF_RIDES,
       RIDEABLE_TYPE, MEMBER_CASUAL,
       CASE
       WHEN TRIM(START_STATION_NAME) = TRIM(END_STATION_NAME) THEN 'RT'
       ELSE 'NRT'
       END AS RT
FROM CYCLIST_TRIP_DATA
GROUP BY (TRIM(START_STATION_NAME)|| ' - ' || TRIM(END_STATION_NAME)), MEMBER_CASUAL, RIDEABLE_TYPE, (CASE
       WHEN TRIM(START_STATION_NAME) = TRIM(END_STATION_NAME) THEN 'RT'
       ELSE 'NRT'
       END)
ORDER BY MEMBER_CASUAL, COUNT(*) DESC 
);

DROP TABLE POPULAR_STARTS;
CREATE TABLE POPULAR_STARTS AS
SELECT *
FROM 
(
SELECT START_STATION_NAME,
       COUNT(*) AS NO_OF_RIDES,
       RIDEABLE_TYPE, MEMBER_CASUAL
FROM CYCLIST_TRIP_DATA
GROUP BY START_STATION_NAME, MEMBER_CASUAL, RIDEABLE_TYPE
ORDER BY COUNT(*) DESC, MEMBER_CASUAL
);

DROP TABLE POPULAR_ENDS;
CREATE TABLE POPULAR_ENDS AS
SELECT *
FROM 
(
SELECT END_STATION_NAME,
       COUNT(*) AS NO_OF_RIDES,
       RIDEABLE_TYPE, MEMBER_CASUAL
FROM CYCLIST_TRIP_DATA
GROUP BY END_STATION_NAME, MEMBER_CASUAL, RIDEABLE_TYPE
ORDER BY COUNT(*) DESC, MEMBER_CASUAL
);

-- done -x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-done-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x-x done-x-x--x-x-x-x-x-x-xdone